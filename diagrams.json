[
    {
        "id": 1,
        "plantuml": "@startuml\n' Online Order Processing System\n\n' Entities\nentity Customer {\n    CustomerID : int\n    Name : varchar\n    Email : varchar\n    Password : varchar\n    Address : varchar\n    + Register()\n    + Login()\n    + Logout()\n    + UpdateProfile()\n}\n\nentity Product {\n    ProductID : int\n    Name : varchar\n    Description : varchar\n    Price : decimal\n    ImageURL : varchar\n    StockQuantity : int\n    + GetDetails()\n    + CheckAvailability()\n}\n\nentity ShoppingCart {\n    CartID : int\n    CustomerID : int\n    + AddItem(ProductID, Quantity)\n    + RemoveItem(ProductID)\n    + UpdateQuantity(ProductID, Quantity)\n    + GetTotalAmount()\n}\n\nentity Order {\n    OrderID : int\n    CustomerID : int\n    OrderDate : datetime\n    TotalAmount : decimal\n    OrderStatus : enum (Placed, Processing, Shipped, Delivered, Cancelled)\n    ShippingAddress : varchar\n    + PlaceOrder()\n    + CancelOrder()\n    + TrackOrder()\n}\n\nentity OrderItem {\n    OrderItemID : int\n    OrderID : int\n    ProductID : int\n    Quantity : int\n    Price : decimal\n}\n\nentity Payment {\n    PaymentID : int\n    OrderID : int\n    PaymentDate : datetime\n    PaymentMethod : enum (CreditCard, PayPal)\n    Amount : decimal\n    TransactionID : varchar\n    PaymentStatus : enum (Pending, Completed, Failed)\n    + ProcessPayment()\n    + VerifyPayment()\n}\n\n' Relationships\nCustomer ||--o{ ShoppingCart : has\nCustomer ||--o{ Order : places\nShoppingCart }o--o{ Product : contains\nOrder }o--o{ OrderItem : includes\nOrderItem }o--|| Product : refers to\nOrder }o--|| Payment : requires\n\n' User Login/Logout Sequence\nparticipant Customer as Cust\nparticipant AuthenticationService as AuthS\nparticipant SessionManager as SessM\nparticipant Database as DB\n\nCust -> AuthS : Attempts to Login (Email, Password)\nactivate AuthS\nAuthS -> DB : Verify Credentials (Email, Password)\nactivate DB\nDB -->> AuthS : Credentials Validated (or Invalid)\ndeactivate DB\nalt Credentials Valid\n    AuthS -> SessM : Create Session (CustomerID)\n    activate SessM\n    SessM -> DB : Store Session Data (CustomerID, SessionID, Timestamp)\n    activate DB\n    DB -->> SessM : Session Data Stored\n    deactivate DB\n    SessM -->> AuthS : SessionID\n    deactivate SessM\n    AuthS -->> Cust : Login Successful (SessionID)\nelse Credentials Invalid\n    AuthS -->> Cust : Login Failed\nend\n\nCust -> AuthS : Attempts to Logout (SessionID)\nactivate AuthS\nAuthS -> SessM : Invalidate Session (SessionID)\nactivate SessM\nSessM -> DB : Delete Session Data (SessionID)\nactivate DB\nDB -->> SessM : Session Data Deleted\ndeactivate DB\nSessM -->> AuthS : Logout Successful\ndeactivate SessM\nAuthS -->> Cust : Logout Successful\ndeactivate AuthS\n\n' Library Management System\nentity Librarian {\n    LibrarianID : int\n    Name : varchar\n    Username : varchar\n    Password : varchar\n    + AddBook(Book)\n    + RemoveBook(BookID)\n    + UpdateBook(Book)\n}\n\nentity Member {\n    MemberID : int\n    Name : varchar\n    Address : varchar\n    ContactNumber : varchar\n    + BorrowBook(Book)\n    + ReturnBook(Book)\n}\n\nentity Book {\n    BookID : int\n    Title : varchar\n    Author : varchar\n    ISBN : varchar\n    PublicationYear : int\n    Availability : boolean\n}\n\nentity Loan {\n    LoanID : int\n    MemberID : int\n    BookID : int\n    LoanDate : datetime\n    DueDate : datetime\n    ReturnDate : datetime\n    + CalculateOverdueFine()\n}\n\nLibrarian ||--o{ Book : manages\nMember ||--o{ Loan : borrows\nBook ||--o{ Loan : is borrowed\nMember }o--|| Book : borrows/returns\n\n@enduml"
    }
]